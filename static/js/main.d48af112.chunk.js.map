{"version":3,"sources":["Message.tsx","SignUp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Message","txt","styleProps","className","SignupForm","useState","text","styleName","message","setMessage","formik","useFormik","initialValues","firstName","lastName","email","password","validationSchema","Yup","max","required","lowercase","notOneOf","test","value","Promise","resolve","reject","axios","method","headers","data","JSON","stringify","campaignUuid","values","then","response","isValid","status","catch","e","console","warn","onSubmit","errors","length","handleSubmit","htmlFor","id","name","type","onChange","handleChange","onBlur","handleBlur","touched","disabled","dirty","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"4RAeeA,MARf,YAAqD,IAAlCC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,WACtB,OACE,yBAAKC,UAAS,UAAKD,GAA0B,KAA/B,oBACXD,ICuJQG,EA3JI,WAAO,IAAD,EACOC,mBAAS,CACrCC,KAAM,GACNC,UAAW,KAHU,mBAChBC,EADgB,KACPC,EADO,KAMjBC,EAASC,YAAU,CACvBC,cAAe,CACbC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,IAAW,CAC3BL,UAAWK,MACRC,IAAI,GAAI,iCACRC,SAAS,uBACZN,SAAUI,MACPC,IAAI,GAAI,iCACRC,SAAS,sBACZJ,SAAUE,MACPC,IAAI,GAAI,4BACRC,SAAS,qBACZL,MAAOG,MACJG,YACAN,MAAM,0BACNO,SAAS,CAAC,iBAAkB,iBAC5BF,SAAS,kBACTG,KAAK,aALD,eAK8B,SAAUC,GAC3C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAM,wCAAyC,CAC7CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,aAAc,uCACdH,KAAM,CACJhB,MAAOL,EAAOyB,OAAOpB,WAIxBqB,MAAK,SAACC,GACL,IAAMC,EAC0B,OAA9BD,EAASN,KAAKA,KAAKQ,OACrBb,EAAQY,MAETE,OAAM,SAACC,GACNC,QAAQC,KAAKF,cAKzBG,SAAU,SAACT,GACTP,IAAM,oCAAqC,CACzCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,aAAc,uCACdH,KAAMI,MAGPC,MAAK,SAACC,GACL5B,EAAW,2BACND,GADK,IAERF,KAAM+B,EAASN,KAAKvB,QACpBD,UAAW,gBAGdiC,OAAM,SAACC,GACNhC,EAAW,2BACND,GADK,IAERF,KAAMmC,EAAEJ,SAASN,KAAKc,OAAO,GAAGrC,QAChCD,UAAW,iBAMrB,OACE,oCACGC,EAAQF,KAAKwC,OAAS,EAAI,KACzB,kBAAC,EAAD,CAAS7C,IAAKO,EAAQF,KAAMJ,WAAYM,EAAQD,YAElD,0BAAMqC,SAAUlC,EAAOqC,cACrB,yBAAK5C,UAAU,iBACb,2BAAO6C,QAAQ,aAAf,cACA,2BACEC,GAAG,YACHC,KAAK,YACLC,KAAK,OACLC,SAAU1C,EAAO2C,aACjBC,OAAQ5C,EAAO6C,WACf/B,MAAOd,EAAOyB,OAAOtB,YAEtBH,EAAO8C,QAAQ3C,WAAaH,EAAOmC,OAAOhC,UACzC,6BAAMH,EAAOmC,OAAOhC,WAClB,MAGN,yBAAKV,UAAU,iBACb,2BAAO6C,QAAQ,YAAf,aACA,2BACEC,GAAG,WACHC,KAAK,WACLC,KAAK,OACLC,SAAU1C,EAAO2C,aACjBC,OAAQ5C,EAAO6C,WACf/B,MAAOd,EAAOyB,OAAOrB,WAEtBJ,EAAO8C,QAAQ1C,UAAYJ,EAAOmC,OAAO/B,SACxC,6BAAMJ,EAAOmC,OAAO/B,UAClB,MAGN,yBAAKX,UAAU,iBACb,2BAAO6C,QAAQ,SAAf,iBACA,2BACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,SAAU1C,EAAO2C,aACjBC,OAAQ5C,EAAO6C,WACf/B,MAAOd,EAAOyB,OAAOpB,QAEtBL,EAAO8C,QAAQzC,OAASL,EAAOmC,OAAO9B,MACrC,6BAAML,EAAOmC,OAAO9B,OAClB,MAGN,yBAAKZ,UAAU,iBACb,2BAAO6C,QAAQ,YAAf,YACA,2BACEC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,SAAU1C,EAAO2C,aACjBC,OAAQ5C,EAAO6C,WACf/B,MAAOd,EAAOyB,OAAOnB,WAEtBN,EAAO8C,QAAQxC,UAAYN,EAAOmC,OAAO7B,SACxC,6BAAMN,EAAOmC,OAAO7B,UAClB,MAGN,4BAAQmC,KAAK,SAASM,WAAY/C,EAAO4B,SAAW5B,EAAOgD,QAA3D,aC5IOC,MATf,WACE,OACE,yBAAKxD,UAAU,OACb,gFACA,kBAAC,EAAD,QCIcyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMnE,c","file":"static/js/main.d48af112.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface MessageProps {\r\n  txt: string;\r\n  styleProps?: string;\r\n}\r\n\r\nfunction Message({ txt, styleProps }: MessageProps) {\r\n  return (\r\n    <div className={`${styleProps ? styleProps : null} messageDefault`}>\r\n      {txt}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React, { useState } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport axios from \"axios\";\r\nimport Message from \"./Message\";\r\n\r\nconst SignupForm = () => {\r\n  const [message, setMessage] = useState({\r\n    text: \"\",\r\n    styleName: \"\",\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      firstName: Yup.string()\r\n        .max(15, \"Must be 15 characters or less\")\r\n        .required(\"First name required\"),\r\n      lastName: Yup.string()\r\n        .max(20, \"Must be 20 characters or less\")\r\n        .required(\"Last name required\"),\r\n      password: Yup.string()\r\n        .max(50, \"Enter a secured password\")\r\n        .required(\"Password required\"),\r\n      email: Yup.string()\r\n        .lowercase()\r\n        .email(\"Enter an email address\")\r\n        .notOneOf([\"test@test.com\"], \"Invalid email\")\r\n        .required(\"Email required\")\r\n        .test(\"checkEmail\", `Email exist`, function (value) {\r\n          return new Promise((resolve, reject) => {\r\n            axios(\"https://api.raisely.com/v3/check-user\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              data: JSON.stringify({\r\n                campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\r\n                data: {\r\n                  email: formik.values.email,\r\n                },\r\n              }),\r\n            })\r\n              .then((response) => {\r\n                const isValid =\r\n                  response.data.data.status === \"Ok\" ? false : true;\r\n                resolve(isValid);\r\n              })\r\n              .catch((e) => {\r\n                console.warn(e);\r\n              });\r\n          });\r\n        }),\r\n    }),\r\n    onSubmit: (values) => {\r\n      axios(\"https://api.raisely.com/v3/signup\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({\r\n          campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\r\n          data: values,\r\n        }),\r\n      })\r\n        .then((response) => {\r\n          setMessage({\r\n            ...message,\r\n            text: response.data.message,\r\n            styleName: \"success\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          setMessage({\r\n            ...message,\r\n            text: e.response.data.errors[0].message,\r\n            styleName: \"error\",\r\n          });\r\n        });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {message.text.length < 1 ? null : (\r\n        <Message txt={message.text} styleProps={message.styleName} />\r\n      )}\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"firstName\">First Name</label>\r\n          <input\r\n            id=\"firstName\"\r\n            name=\"firstName\"\r\n            type=\"text\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.firstName}\r\n          />\r\n          {formik.touched.firstName && formik.errors.firstName ? (\r\n            <div>{formik.errors.firstName}</div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"lastName\">Last Name</label>\r\n          <input\r\n            id=\"lastName\"\r\n            name=\"lastName\"\r\n            type=\"text\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.lastName}\r\n          />\r\n          {formik.touched.lastName && formik.errors.lastName ? (\r\n            <div>{formik.errors.lastName}</div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"email\">Email Address</label>\r\n          <input\r\n            id=\"email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.email}\r\n          />\r\n          {formik.touched.email && formik.errors.email ? (\r\n            <div>{formik.errors.email}</div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            id=\"password\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            value={formik.values.password}\r\n          />\r\n          {formik.touched.password && formik.errors.password ? (\r\n            <div>{formik.errors.password}</div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <button type=\"submit\" disabled={!(formik.isValid && formik.dirty)}>\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport SignupForm from \"./SignUp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1> Job hunting sucks...hahah... But here we go :) </h1>\r\n      <SignupForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}